# -*- coding: utf-8 -*-
"""A_start_search

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sXk8LIEUj-4m7pQV9qak3wOO1VnBqLkZ

#Import package
"""

import heapq

"""#Create priority queue"""

# Create Priority Queue
class PriorityQueue:
    def __init__(self):
        self.elements = []
    #Checking priority queue is empty
    def empty(self):
        return len(self.elements) == 0

    # Push item with priority into queue
    def put(self, item, priority):
        heapq.heappush(self.elements, (priority, item))
    
    # Pop and get first item out of queue
    def get(self):
        return heapq.heappop(self.elements)[1]



"""#Create path from start to goal"""

def reconstruct_path(came_from, start, goal):
    # Init position
    current = goal
    
    # List of points
    path = [current]
    
    
    while current != start:
        #Move from current postion to previous position
        current = came_from[current]
        path.append(current)
        
    
    #path.append(start)  # optional
    path.reverse()  # optional
    return path

def heuristic(a, b):
    (x1, y1) = a
    (x2, y2) = b
    return abs(x1 - x2) + abs(y1 - y2)



"""#A Start Search"""

def a_star_search(graph, start, goal):
    #Push start into frontier
    frontier = PriorityQueue()
    frontier.put(start, 0)
    
    # Create a dictionary that contains previous position of current position   
    came_from = {}
    # Create a dictionary that contains cost_so_far[current_position] = sum up cost from start to current_position
    cost_so_far = {}
    
    # Initilization dictionary 
    came_from[start] = None
    cost_so_far[start] = 0

    
    while not frontier.empty():
        # Get position from front positions (previous position)
        current = frontier.get()

        # If you are standing at goal to stop
        if current == goal:
            break

        # Get adjacent vertices
        for next in graph.neighbors(current):
            #Update new_cost 
            new_cost = cost_so_far[current] + 1
            
            # Checking is in cost_so_far or new_cost is smaller than old_cost
            if next not in cost_so_far or new_cost < cost_so_far[next]:
                #Update new cost
                cost_so_far[next] = new_cost
                priority = new_cost + heuristic(goal, next)
                
                #Update frontier and came_from
                frontier.put(next, priority)
                came_from[next] = current

    return reconstruct_path(came_from, start, goal)

